@page "/"

<PageTitle>Cocomo</PageTitle>

<h1>Cocomo (Constructive Cost Model)</h1>
<div class="row">
    <div class="col-4">            
        <div class="row mb-3"> 
            <label for="kloc"><strong>KLOC (Thousands of lines of code)</strong></label>
            <input type="number" class="form-control"@bind-value:event="onchange" @oninput="KlocChanged" step="any" @bind-value="Calc.Kloc" />   
        </div>       
        <label for="projectModel">Model:</label>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="projectModel" value="0" id="projectModel0" checked="@(Calc.ProjectModel == 0)" @onchange="ProjectModelChanged">
            <label class="form-check-label" for="projectModel0">Basic</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="projectModel" value="1" id="projectModel1" checked="@(Calc.ProjectModel == 1)" @onchange="ProjectModelChanged">
            <label class="form-check-label" for="projectModel1">Intermediate</label>
        </div>
        <br />
        <label for="projectType">Type:</label>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="projectType" value="0" id="projectType0" checked="@(Calc.ProjectType == 0)" @onchange="ProjectTypeChanged">
            <label class="form-check-label" for="projectType0">Organic</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="projectType" value="1" id="projectType1" checked="@(Calc.ProjectType == 1)" @onchange="ProjectTypeChanged">
            <label class="form-check-label" for="projectType1">Semi-Detached</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="projectType" value="2" id="projectType2" checked="@(Calc.ProjectType == 2)" @onchange="ProjectTypeChanged">
            <label class="form-check-label" for="projectType2">Embedded</label>
        </div>

        <div class="row mb-3">
            <label for="a">a</label>
            <input id="a" type="number" class="form-control" @bind-value="@a" disabled />
        </div>
        <div class="row mb-3">
            <label for="b">b</label>
            <input id="b" type="number" class="form-control" @bind-value="@b" disabled />
        </div>
        <div class="row mb-3">
            <label for="c">c</label>
            <input id="c" type="number" class="form-control" @bind-value="@c" disabled />
        </div>
        <div class="row mb-3">
            <label for="d">d</label>
            <input id="d" type="number" class="form-control" @bind-value="@d" disabled />
        </div>

        <div class="row mb-3">
            <label for="ei">Ei = a * (Kloc <sup>b</sup>) => @a * (@Calc.Kloc <sup>@b</sup>)</label>
            <input id="ei" type="number" class="form-control" @bind-value="@Ei" disabled />
        </div>
        <div class="row mb-3">
            <label for="eaf">EAF (Effort Adjustment Factor)</label>
            <input id="eaf" type="number" class="form-control" @bind-value="@EAF" disabled />
        </div>
        <div class="row mb-3">
            <label for="e">Effort applied = a * (KLoc <sup>b</sup>) * EAF => @a * (@Calc.Kloc <sup>@b</sup>) * @EAF</label>
            <input id="e" type="number" class="form-control" @bind-value="@E" disabled />
        </div>
    </div> 
    <div class="col-8">
        @if (Calc.ProjectModel != 0)
        {
        <div class="row">
            <div class="col-3"><strong>Drivers</strong></div>    
            <div class="col-9">
                <div class="row mb-3">  
                    <div class="col-2">Very low</div>  
                    <div class="col-2">Low</div>  
                    <div class="col-2">Nominal</div>  
                    <div class="col-2">High</div>  
                    <div class="col-2">Very high</div>  
                    <div class="col-2">Extra high</div>  
                </div>
            </div>
        </div>
        <div class="row">
        @{
            var indexDriver = 0; 
        }
        @foreach(var d in drivers)
        {
            <div class="col-3">
                <span>@factors[indexDriver]</span>
            </div>            
            <div class="col-9">
                <div class="row mb-3">    
                @for(var indexValue = 0; indexValue < 6; indexValue++)
                {            
                    <div class="col-2">
                        <div class="form-check">
                            <label for="factor@(indexDriver)_@(indexValue)">@d.Values[indexValue]</label>
                            @if(d.Values[indexValue] != 0)
                            {
                                <input id="factor@(indexDriver)_@(indexValue)" name="factor@(indexDriver)" type="radio" class="form-check-input" checked="@(d.Values[indexValue] == 1)" @onchange="FactorChanged" value="@(indexDriver + "_" + d.Values[indexValue].ToString())" />
                            }
                            else
                            {
                                <input name="factor@(indexDriver)" type="radio" class="form-check-input" disabled />
                            }
                        </div>
                    </div>
                }
            </div>
        @{
            indexDriver++;
        }
        </div>
        }
        </div>
        }
    </div>
</div>
<h2>Results</h2>
<div class="row">
    <div class="col-3">
        <div class="row mb-3">
            <label for="result">Effort</label>
            <div class="input-group mb-3">
            <input id="result" type="number" class="form-control" @bind-value="@Result" disabled />
                <span class="input-group-text">person-months</span>
            </div>            
        </div>
    </div>
    <div class="col-3">
        <div class="row mb-3">
            <label for="Duration">Duration @DurationFormula</label>
            <div class="input-group mb-3">
            <input id="Duration" type="number" class="form-control" @bind-value="@Duration" disabled />
                <span class="input-group-text">person-months</span>
            </div>            
        </div>
    </div>
    <div class="col-3">
        <div class="row mb-3">
            <label for="Staffing">Average staffing = (Effort / Duration)</label>
            <div class="input-group mb-3">
            <input id="Staffing" type="number" class="form-control" @bind-value="@Staffing" disabled />
                <span class="input-group-text">people</span>
            </div>            
        </div>
    </div>
</div>

@code {
    public Calculator Calc = new Calculator();

    private double a { get; set; } = 2.4;
    private double b { get; set; } = 1.05;
    private double c { get; set; } = 2.5;
    private double d { get; set; } = 0.38;
    private double EAF { get; set; } = 1;
    private double Ei { get; set; } = 0;
    private double E { get; set; } = 0;

    private double Result { get; set; }
    private double Duration { get; set; }
    private double Staffing { get; set; }
    private string DurationFormula { get; set; } = BasicDurationFormula;
    const string BasicDurationFormula = "= c * (Ei pow d)";
    const string IntermediateDurationFormula = "= c * (E pow d)";

    private List<double> selectedFactors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        selectedFactors = new List<double>();
        // Initialize selectedFactors default values
        for(var indexFactor = 0; indexFactor < factors.Count(); indexFactor++)
        {
            selectedFactors.Add(1);
        }
    }

    private void FactorChanged(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        var index = int.Parse(value.Split("_")[0]);
        var factor = double.Parse(value.Split("_")[1]);
        selectedFactors[index] = factor;
        Calculate();
    }

    private void ProjectModelChanged(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var _model))
        {
            Calc.ProjectModel = _model;
            if(_model == 0)
            {
                EAF = 1;
            }
            Calculate();
        }
    }

    private void ProjectTypeChanged(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var _type))
        {
            Calc.ProjectType = _type;
            var indexVariable = (Calc.ProjectModel * Calc.ProjectType) + Calc.ProjectType;
            a = variables[indexVariable].ABCD[0];
            b = variables[indexVariable].ABCD[1];
            c = variables[indexVariable].ABCD[2];
            d = variables[indexVariable].ABCD[3];
            Calculate();
        }
    }

    private void KlocChanged(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var _kloc))
        {
            Calc.Kloc = _kloc;
            Calculate();
        }
    }

    private void Calculate()
    {
        Ei = a * Math.Pow(Calc.Kloc, b);     

        if (Calc.ProjectModel == 0) // Basic Model
        {
            EAF = 1;           
            E = a * Math.Pow(Calc.Kloc, b) * EAF;
            Duration = c * Math.Pow(Ei, d);
            DurationFormula = BasicDurationFormula;
        }
        else if (Calc.ProjectModel == 1) // Intermediate Model
        {
            var eaf = 1.0;
            foreach(var factor in selectedFactors)
            {
                eaf *= factor;
            }
            EAF = eaf;           
            E = a * Math.Pow(Calc.Kloc, b) * EAF;
            Duration = c * Math.Pow(E, d);
            DurationFormula = IntermediateDurationFormula;
        }

        Staffing = Ei / Duration;
        Staffing = Math.Round(Staffing, 2);
        Result = Math.Round(E, 2);
        Duration = Math.Round(Duration, 2);
    }

    private List<string> factors = new List<string>() {
        "Required software reliability",
        "Size of application database",
        "Complexity of the product",
        "Run-time performance constraints",
        "Memory constraints",
        "Volatility of the virtual machine environment",
        "Required turnabout time",
        "Analyst capability", 
        "Applications experience", 
        "Software engineer capability",
        "Virtual machine experience",
        "Programming language experience",
        "Application of software engineering methods",
        "Use of software tools",
        "Required development schedule"
    };

    List<Driver> drivers = new List<Driver>()
    {
        new Driver() { Values = new double[] { 0.75, 0.88, 1.00, 1.15, 1.40, 0 } }, // "Required software reliability" // Fiabilité logicielle requise
        new Driver() { Values = new double[] { 0, 0.94, 1.00, 1.08, 1.16, 0 } }, // "Size of application database" // Taille de la base de données de l’application
        new Driver() { Values = new double[] { 0.70, 0.85, 1.00, 1.15, 1.30, 1.65 } }, // "Complexity of the product" // Complexité du produit
        new Driver() { Values = new double[] { 0, 0, 1.00, 1.11, 1.30, 1.66 } }, // Run-time performance constraints" // Exigences de performance
        new Driver() { Values = new double[] { 0, 0, 1.00, 1.06, 1.21, 1.56 } }, // Memory constraints // Limitations de la mémoire
        new Driver() { Values = new double[] { 0, 0.87, 1.00, 1.15, 1.30, 0 } }, // Volatility of the virtual machine environment // Instabilité de l’environnement
        new Driver() { Values = new double[] { 0, 0.87, 1.00, 1.07, 1.15, 0 } }, // Required turnabout time // Temps de récupération requis
        new Driver() { Values = new double[] { 1.46, 1.19, 1.00, 0.86, 0.71, 0 } }, // Analyst capability // Capacités d’analyse
        new Driver() { Values = new double[] { 1.29, 1.13, 1.00, 0.91, 0.82, 0 } }, // Applications experience // Capacités de développement de logiciels
        new Driver() { Values = new double[] { 1.42, 1.17, 1.00, 0.86, 0.70, 0 } }, // Software engineer capability // Expérience en développement
        new Driver() { Values = new double[] { 1.21, 1.10, 1.00, 0.90, 0, 0 } }, // Virtual machine experience // Expérience de la machine virtuelle
        new Driver() { Values = new double[] { 1.14, 1.07, 1.00, 0.95, 0, 0 } }, // Programming language experience // Expérience du langage de programmation // Méthodes de développement
        new Driver() { Values = new double[] { 1.24, 1.10, 1.00, 0.91, 0.82, 0 } }, // Application of software engineering methods // Utilisation de méthodes d’ingénierie logicielle
        new Driver() { Values = new double[] { 1.24, 1.10, 1.00, 0.91, 0.83, 0 } }, // Use of software tools // Outils de développement
        new Driver() { Values = new double[] { 1.23, 1.08, 1.00, 1.04, 1.10, 0 } } // Required development schedule // Calendrier de développement requis // Chronologie du développement
    };
    
    List<Variable> variables = new List<Variable>()
    {
        new Variable() { ABCD = new double[] { 2.4, 1.05, 2.5, 0.38} }, // Basic, Organic
        new Variable() { ABCD = new double[] { 3.0, 1.12, 2.5, 0.35} }, // Basic, Semi-Detached 
        new Variable() { ABCD = new double[] { 3.6, 1.2, 2.5, 0.32} }, // Basic, Embedded
        new Variable() { ABCD = new double[] { 3.2, 1.05, 2.5, 0.38} }, // Intermediate, Organic
        new Variable() { ABCD = new double[] { 3.0, 1.12, 2.5, 0.35} }, // Basic, Semi-Detached 
        new Variable() { ABCD = new double[] { 2.8, 1.2, 2.5, 0.32} }, // Basic, Embedded
    };

    public class Driver
    {
        public double[] Values { get; set; }
    }
    
    public class Variable
    {
        public double[] ABCD { get; set; }
    }

    public class Calculator
    {
        public int Kloc { get; set; }
        public int ProjectModel { get; set; } = 0;
        public int ProjectType { get; set; } = 0;
    }
}
